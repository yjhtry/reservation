syntax = "proto3";

package reservation;

import "google/protobuf/timestamp.proto";


// reservation status
enum ReservationStatus {
  RESERVATION_STATUS_UNKNOWN = 0;
  RESERVATION_STATUS_PENDING = 1;
  RESERVATION_STATUS_CONFIRMED = 2;
  RESERVATION_STATUS_BLOCKED = 3;
}

// the op type of the reservation when listen reservation updates
enum ReservationType {
  RESERVATION_TYPE_UNKNOWN = 0;
  RESERVATION_TYPE_CREATE = 1;
  RESERVATION_TYPE_UPDATE = 2;
  RESERVATION_TYPE_DELETE = 3;
}

// core reservation, contains the reservation info
// the id cannot put when create reservation, it will be generated by the system
message Reservation {
  // reservation id, when listen reservation updates, it will be used to identify the reservation
  int64 id = 1;
  // resource id
  string resource_id = 2;
  // user id
  string user_id = 3;

  // reservation status
  ReservationStatus status = 4;
  // reservation start time
  google.protobuf.Timestamp start = 5;
  // reservation end time
  google.protobuf.Timestamp end = 6;
  // reservation note
  string note = 7;
}

// create reservation request data
message ReserveRequest {
  Reservation reservation = 1;
}

// create reservation response data
message ReserveResponse {
  Reservation reservation = 1;
}

// update reservation request data
message updateRequest {
  int64 id = 1;
  // ReservationStatus status = 2;
  string note = 3;
}

// update reservation response data
message UpdateResponse {
  Reservation reservation = 1;
}

// confirm reservation request data
message ConfirmRequest {
  int64 id = 1;
}

// confirm reservation response data
message ConfirmResponse {
  Reservation reservation = 1;
}

// cancel reservation request data
message CancelRequest {
  int64 id = 1;
}

// cancel reservation response data
message CancelResponse {
  Reservation reservation = 1;
}

// get reservation request data
message GetRequest {
  int64 id = 1;
}

// get reservation response data
message GetResponse {
  Reservation reservation = 1;
}

message ReservationQuery {
  string resource_id = 1;
  string user_id = 2;

  // use status to filter result, If UNKNOWN return all reservations
  ReservationStatus status = 3;
  google.protobuf.Timestamp start = 4;
  google.protobuf.Timestamp end = 5;

  // current page
  int32 page = 6;
  // page size
  int32 page_size = 7;
  // order by
  bool is_desc = 8;
}

// query reservation list request data
message QueryRequest {
  ReservationQuery query = 1;
}

message ReservationFilter {
  string resource_id = 1;
  string user_id = 2;

  ReservationStatus status = 3;

  int64 cursor = 4;
  bool is_desc = 5;
  // page size
  int32 page_size = 6;
}

message FilterRequest {
  ReservationFilter filter = 1;
}

message FilterPager {
  int64 prev =1;
  int64 next = 2;
  int64 total = 3;
}

message FilterResponse {
  repeated Reservation reservations = 1;

  FilterPager pager = 2;
}

// listen reservation updates request data
message ListenRequest {}

// listen reservation updates response data
message ListenResponse {
  ReservationType op = 1;
  Reservation reservation = 2;
}

// reservation service to manage the reservations
service ReservationService {
  rpc reserve(ReserveRequest) returns (ReserveResponse);
  rpc confirm(ConfirmRequest) returns (ConfirmResponse);
  rpc update(updateRequest) returns (UpdateResponse);
  rpc cancel(CancelRequest) returns (CancelResponse);
  rpc get(GetRequest) returns (GetResponse);
  rpc query(QueryRequest) returns (stream Reservation);
  rpc filter(FilterRequest) returns (FilterResponse);
  // another system can monitor the reservations and newly reserved/confirmed/canceled reservations
  rpc listen(ListenRequest) returns (stream ListenResponse);
}
